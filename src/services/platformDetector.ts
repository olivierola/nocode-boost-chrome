// Service de d√©tection des plateformes no-code
export interface NoCodePlatform {
  name: string;
  domains: string[];
  selectors: string[];
  globals: string[];
  icon: string;
  color: string;
  capabilities: {
    errorDetection?: boolean;
    performanceAnalysis?: boolean;
    seoAudit?: boolean;
    accessibilityCheck?: boolean;
    designConsistency?: boolean;
    workflowOptimization?: boolean;
    databaseAudit?: boolean;
    securityCheck?: boolean;
    uiConsistency?: boolean;
  };
  interactions: string[];
  prompts: string[];
}

export const SUPPORTED_PLATFORMS: NoCodePlatform[] = [
  {
    name: "Webflow",
    domains: ["webflow.com", "webflow.io"],
    selectors: [".w-webflow-badge", "[data-wf-page]", ".w-form"],
    globals: ["Webflow", "_wf_refresh"],
    icon: "üåä",
    color: "#4353FF",
    capabilities: {
      errorDetection: true,
      performanceAnalysis: true,
      seoAudit: true,
      accessibilityCheck: true,
      designConsistency: true
    },
    interactions: [
      "D√©tection d'erreurs communes (alt tags manquants, liens cass√©s, probl√®mes responsive)",
      "Optimisation des performances (images, CSS inutilis√©, scripts bloquants)",
      "Audit SEO complet avec recommandations",
      "V√©rification de l'accessibilit√© WCAG 2.1"
    ],
    prompts: [
      "Analysez cette page Webflow et identifiez tous les probl√®mes d'accessibilit√©. Pour chaque probl√®me trouv√©, proposez une correction sp√©cifique avec le code exact √† impl√©menter dans Webflow.",
      "Optimisez les performances de cette page Webflow. Analysez les images non optimis√©es, CSS inutilis√©, JavaScript bloquant, et proposez des corrections avec instructions Webflow pr√©cises."
    ]
  },
  {
    name: "Bubble",
    domains: ["bubble.io", "run.dev"],
    selectors: [".bubble-element", "[data-bubble]"],
    globals: ["bubble_fn", "app"],
    icon: "ü´ß",
    color: "#1F4DFF",
    capabilities: {
      workflowOptimization: true,
      databaseAudit: true,
      securityCheck: true,
      performanceAnalysis: true,
      uiConsistency: true
    },
    interactions: [
      "Optimisation des workflows (d√©tection de boucles infinies, requ√™tes inefficaces)",
      "Audit de la base de donn√©es (normalisation, index, relations)",
      "V√©rification des r√®gles de confidentialit√© et s√©curit√©",
      "Analyse des performances et optimisations"
    ],
    prompts: [
      "Auditez cette application Bubble pour optimiser ses performances. Analysez les workflows inefficaces, requ√™tes database lentes, privacy rules manquantes, et proposez des am√©liorations avec √©tapes pr√©cises dans Bubble.",
      "V√©rifiez la s√©curit√© de cette app Bubble. Contr√¥lez les privacy rules pour chaque data type, user permissions, API security, et listez les vuln√©rabilit√©s avec corrections Bubble."
    ]
  },
  {
    name: "Framer",
    domains: ["framer.com", "framer.website"],
    selectors: ["[data-framer-component]", ".framer-"],
    globals: ["Framer", "__framer"],
    icon: "üé®",
    color: "#0066FF",
    capabilities: {
      performanceAnalysis: true,
      seoAudit: true,
      designConsistency: true,
      accessibilityCheck: true
    },
    interactions: [
      "Optimisation des animations et performances",
      "Audit SEO pour sites statiques",
      "V√©rification de la coh√©rence du design system",
      "Tests d'accessibilit√© des interactions"
    ],
    prompts: [
      "Optimisez les performances de cette page Framer. Analysez les animations lourdes, images non optimis√©es, et proposez des am√©liorations de performance.",
      "Auditez le design system de ce site Framer. V√©rifiez la coh√©rence des couleurs, typographie, espacements, et proposez des standardisations."
    ]
  },
  {
    name: "Notion",
    domains: ["notion.so", "notion.site"],
    selectors: [".notion-page", "[data-block-id]"],
    globals: ["notion"],
    icon: "üìù",
    color: "#000000",
    capabilities: {
      seoAudit: true,
      accessibilityCheck: true,
      designConsistency: true
    },
    interactions: [
      "Optimisation SEO pour pages publiques",
      "Am√©lioration de l'accessibilit√© du contenu",
      "Suggestions de structure et navigation"
    ],
    prompts: [
      "Optimisez cette page Notion publique pour le SEO. Analysez la structure des titres, meta descriptions, contenu, et proposez des am√©liorations.",
      "Am√©liorez l'accessibilit√© de cette page Notion. V√©rifiez la hi√©rarchie des titres, contrastes, et proposez des optimisations."
    ]
  }
];

export class PlatformDetector {
  private detectedPlatform: NoCodePlatform | null = null;

  async detectPlatform(): Promise<NoCodePlatform | null> {
    // D√©tection bas√©e sur l'URL
    const currentDomain = window.location.hostname;
    
    for (const platform of SUPPORTED_PLATFORMS) {
      // V√©rification du domaine
      const domainMatch = platform.domains.some(domain => 
        currentDomain.includes(domain)
      );

      if (domainMatch) {
        // V√©rification suppl√©mentaire avec les s√©lecteurs CSS
        const selectorMatch = platform.selectors.some(selector => 
          document.querySelector(selector) !== null
        );

        // V√©rification des variables globales
        const globalMatch = platform.globals.some(global => 
          (window as any)[global] !== undefined
        );

        if (selectorMatch || globalMatch) {
          this.detectedPlatform = platform;
          return platform;
        }
      }
    }

    return null;
  }

  // Nouvelles m√©thodes pour l'int√©gration frontend
  detectAITextFields(): NodeListOf<Element> {
    const selectors = [
      'textarea[placeholder*="prompt"]',
      'textarea[placeholder*="message"]', 
      'input[placeholder*="ask"]',
      'div[contenteditable="true"]',
      '[role="textbox"]',
      '.chat-input',
      '.prompt-input',
      '.ai-input'
    ];
    
    return document.querySelectorAll(selectors.join(', '));
  }

  detectSendButtons(): NodeListOf<Element> {
    const selectors = [
      'button[type="submit"]',
      'button:has(svg[data-icon="send"])',
      'button:has(svg[data-icon="arrow-right"])',
      '.send-button',
      '.submit-button',
      '[aria-label*="send"]',
      '[aria-label*="submit"]'
    ];
    
    return document.querySelectorAll(selectors.join(', '));
  }

  detectResponseElements(): NodeListOf<Element> {
    const selectors = [
      '.message',
      '.response',
      '.ai-message',
      '.chat-message',
      '[role="log"]',
      '[data-message-id]'
    ];
    
    return document.querySelectorAll(selectors.join(', '));
  }

  interceptPrompts(onInterceptCallback: (prompt: string, element: Element) => void): void {
    const textFields = this.detectAITextFields();
    const sendButtons = this.detectSendButtons();

    // Intercepter les soumissions de formulaires
    sendButtons.forEach(button => {
      button.addEventListener('click', (e) => {
        e.preventDefault();
        const form = button.closest('form');
        const textField = form?.querySelector('textarea, input[type="text"]') as HTMLInputElement;
        
        if (textField && textField.value.trim()) {
          onInterceptCallback(textField.value, textField);
        }
      });
    });

    // Intercepter les touches Enter
    textFields.forEach(field => {
      field.addEventListener('keydown', (e: KeyboardEvent) => {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          const value = (field as HTMLInputElement).value || (field as HTMLElement).textContent;
          if (value?.trim()) {
            onInterceptCallback(value, field);
          }
        }
      });
    });
  }

  detectErrorMessages(): boolean {
    const errorSelectors = [
      '.error',
      '.error-message',
      '[role="alert"]',
      '.alert-error',
      '.text-red',
      '.text-danger',
      '.notification-error'
    ];

    const errorKeywords = [
      'error',
      'erreur',
      'failed',
      '√©chou√©',
      'invalid',
      'invalide',
      'timeout',
      'limit',
      'limite'
    ];

    // V√©rifier les √©l√©ments avec classes d'erreur
    const errorElements = document.querySelectorAll(errorSelectors.join(', '));
    if (errorElements.length > 0) return true;

    // V√©rifier le contenu pour des mots-cl√©s d'erreur
    const allText = document.body.textContent?.toLowerCase() || '';
    return errorKeywords.some(keyword => allText.includes(keyword));
  }

  async scanForIssues(platform: NoCodePlatform): Promise<any[]> {
    const issues: any[] = [];

    if (platform.capabilities.accessibilityCheck) {
      issues.push(...await this.checkAccessibility());
    }

    if (platform.capabilities.performanceAnalysis) {
      issues.push(...await this.analyzePerformance());
    }

    if (platform.capabilities.seoAudit) {
      issues.push(...await this.auditSEO());
    }

    if (platform.capabilities.designConsistency) {
      issues.push(...await this.checkDesignConsistency());
    }

    return issues;
  }

  private async checkAccessibility(): Promise<any[]> {
    const issues: any[] = [];

    // V√©rification des images sans alt
    const imagesWithoutAlt = document.querySelectorAll('img:not([alt])');
    if (imagesWithoutAlt.length > 0) {
      issues.push({
        type: 'accessibility',
        severity: 'high',
        title: 'Images sans attribut alt',
        description: `${imagesWithoutAlt.length} images n'ont pas d'attribut alt`,
        elements: Array.from(imagesWithoutAlt),
        fix: 'Ajouter des attributs alt descriptifs √† toutes les images'
      });
    }

    // V√©rification des liens sans texte
    const emptyLinks = document.querySelectorAll('a:empty, a[aria-label=""]');
    if (emptyLinks.length > 0) {
      issues.push({
        type: 'accessibility',
        severity: 'medium',
        title: 'Liens sans texte descriptif',
        description: `${emptyLinks.length} liens n'ont pas de texte ou d'aria-label`,
        elements: Array.from(emptyLinks),
        fix: 'Ajouter du texte descriptif ou des aria-label aux liens'
      });
    }

    // V√©rification de la hi√©rarchie des titres
    const headings = document.querySelectorAll('h1, h2, h3, h4, h5, h6');
    if (headings.length > 0) {
      const headingLevels = Array.from(headings).map(h => parseInt(h.tagName.charAt(1)));
      let previousLevel = 0;
      let hasIssue = false;

      for (const level of headingLevels) {
        if (level > previousLevel + 1) {
          hasIssue = true;
          break;
        }
        previousLevel = level;
      }

      if (hasIssue) {
        issues.push({
          type: 'accessibility',
          severity: 'medium',
          title: 'Hi√©rarchie des titres incorrecte',
          description: 'La hi√©rarchie des titres H1-H6 pr√©sente des sauts de niveau',
          elements: Array.from(headings),
          fix: 'Respecter l\'ordre hi√©rarchique des titres (H1 > H2 > H3...)'
        });
      }
    }

    return issues;
  }

  private async analyzePerformance(): Promise<any[]> {
    const issues: any[] = [];

    // V√©rification des images lourdes
    const largeImages = document.querySelectorAll('img');
    const heavyImages: Element[] = [];

    largeImages.forEach(img => {
      const src = img.getAttribute('src');
      if (src && !src.includes('webp') && !img.hasAttribute('loading')) {
        heavyImages.push(img);
      }
    });

    if (heavyImages.length > 0) {
      issues.push({
        type: 'performance',
        severity: 'medium',
        title: 'Images non optimis√©es',
        description: `${heavyImages.length} images pourraient √™tre optimis√©es`,
        elements: heavyImages,
        fix: 'Convertir en WebP et ajouter lazy loading'
      });
    }

    // V√©rification des scripts bloquants
    const blockingScripts = document.querySelectorAll('script:not([async]):not([defer])');
    if (blockingScripts.length > 3) {
      issues.push({
        type: 'performance',
        severity: 'high',
        title: 'Scripts bloquants d√©tect√©s',
        description: `${blockingScripts.length} scripts bloquent le rendu`,
        elements: Array.from(blockingScripts),
        fix: 'Ajouter async ou defer aux scripts non critiques'
      });
    }

    return issues;
  }

  private async auditSEO(): Promise<any[]> {
    const issues: any[] = [];

    // V√©rification du titre
    const title = document.querySelector('title');
    if (!title || title.textContent!.length < 30 || title.textContent!.length > 60) {
      issues.push({
        type: 'seo',
        severity: 'high',
        title: 'Titre de page probl√©matique',
        description: 'Le titre doit faire entre 30 et 60 caract√®res',
        elements: title ? [title] : [],
        fix: 'Optimiser le titre entre 30-60 caract√®res avec mot-cl√© principal'
      });
    }

    // V√©rification de la meta description
    const metaDesc = document.querySelector('meta[name="description"]');
    if (!metaDesc || metaDesc.getAttribute('content')!.length < 120) {
      issues.push({
        type: 'seo',
        severity: 'high',
        title: 'Meta description manquante ou trop courte',
        description: 'La meta description doit faire 120-160 caract√®res',
        elements: metaDesc ? [metaDesc] : [],
        fix: 'Ajouter une meta description de 120-160 caract√®res'
      });
    }

    // V√©rification des H1
    const h1s = document.querySelectorAll('h1');
    if (h1s.length === 0) {
      issues.push({
        type: 'seo',
        severity: 'high',
        title: 'Aucun titre H1 trouv√©',
        description: 'Chaque page doit avoir un titre H1 unique',
        elements: [],
        fix: 'Ajouter un titre H1 avec le mot-cl√© principal'
      });
    } else if (h1s.length > 1) {
      issues.push({
        type: 'seo',
        severity: 'medium',
        title: 'Plusieurs titres H1 d√©tect√©s',
        description: 'Une seule balise H1 par page est recommand√©e',
        elements: Array.from(h1s),
        fix: 'Garder un seul H1, convertir les autres en H2'
      });
    }

    return issues;
  }

  private async checkDesignConsistency(): Promise<any[]> {
    const issues: any[] = [];

    // V√©rification des couleurs
    const allElements = document.querySelectorAll('*');
    const colors = new Set<string>();
    
    allElements.forEach(el => {
      const style = window.getComputedStyle(el);
      if (style.color && style.color !== 'rgba(0, 0, 0, 0)') {
        colors.add(style.color);
      }
      if (style.backgroundColor && style.backgroundColor !== 'rgba(0, 0, 0, 0)') {
        colors.add(style.backgroundColor);
      }
    });

    if (colors.size > 20) {
      issues.push({
        type: 'design',
        severity: 'medium',
        title: 'Trop de couleurs diff√©rentes',
        description: `${colors.size} couleurs diff√©rentes utilis√©es`,
        elements: [],
        fix: 'Limiter √† une palette de 8-12 couleurs maximum'
      });
    }

    // V√©rification des polices
    const fonts = new Set<string>();
    allElements.forEach(el => {
      const style = window.getComputedStyle(el);
      if (style.fontFamily) {
        fonts.add(style.fontFamily);
      }
    });

    if (fonts.size > 4) {
      issues.push({
        type: 'design',
        severity: 'low',
        title: 'Trop de polices diff√©rentes',
        description: `${fonts.size} polices diff√©rentes utilis√©es`,
        elements: [],
        fix: 'Limiter √† 2-3 polices maximum'
      });
    }

    return issues;
  }

  generateFixPrompt(issue: any, platform: NoCodePlatform): string {
    const baseContext = `Vous √™tes un expert en ${platform.name}. `;
    
    switch (issue.type) {
      case 'accessibility':
        return `${baseContext}Corrigez ce probl√®me d'accessibilit√© : "${issue.title}". 
        Description : ${issue.description}
        
        Fournissez des instructions √©tape par √©tape sp√©cifiques √† ${platform.name} pour r√©soudre ce probl√®me.
        Incluez le code exact √† utiliser si applicable.`;

      case 'performance':
        return `${baseContext}Optimisez les performances : "${issue.title}".
        Description : ${issue.description}
        
        Proposez des solutions concr√®tes avec les r√©glages sp√©cifiques √† ${platform.name}.
        Incluez les param√®tres d'optimisation recommand√©s.`;

      case 'seo':
        return `${baseContext}Am√©liorez le SEO : "${issue.title}".
        Description : ${issue.description}
        
        Donnez les instructions pr√©cises pour optimiser cet aspect dans ${platform.name}.
        Incluez les meilleures pratiques et le contenu sugg√©r√©.`;

      case 'design':
        return `${baseContext}Corrigez la coh√©rence design : "${issue.title}".
        Description : ${issue.description}
        
        Proposez un design system coh√©rent avec les outils ${platform.name}.
        Incluez les valeurs exactes √† utiliser (couleurs, polices, espacements).`;

      default:
        return `${baseContext}R√©solvez ce probl√®me : "${issue.title}". 
        Description : ${issue.description}
        
        Fournissez une solution d√©taill√©e adapt√©e √† ${platform.name}.`;
    }
  }

  getDetectedPlatform(): NoCodePlatform | null {
    return this.detectedPlatform;
  }
}

export const platformDetector = new PlatformDetector();